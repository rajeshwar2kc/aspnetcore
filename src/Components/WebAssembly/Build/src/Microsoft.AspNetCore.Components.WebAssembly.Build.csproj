<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(DefaultNetCoreTargetFramework);net46</TargetFrameworks>
    <TargetName>Microsoft.AspNetCore.Components.WebAssembly.Build.Tasks</TargetName>
    <AssemblyName>Microsoft.AspNetCore.Components.WebAssembly.Build</AssemblyName>
    <Description>Build mechanism for ASP.NET Core Blazor WebAssembly applications.</Description>
    <IsShippingPackage>true</IsShippingPackage>
    <HasReferenceAssembly>false</HasReferenceAssembly>
    <GenerateDependencyFile>false</GenerateDependencyFile>
  </PropertyGroup>

  <!-- Pack settings -->
  <PropertyGroup>
    <!-- Producing this package requires building with NodeJS enabled. -->
    <IsPackable Condition="'$(BuildNodeJS)' == 'false'">false</IsPackable>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <NuspecFile>Microsoft.AspNetCore.Components.WebAssembly.Build.nuspec</NuspecFile>
  </PropertyGroup>

  <ItemGroup>
    <NuspecProperty Include="configuration=$(Configuration)" />
    <NuspecProperty Include="taskskDir=$(OutputPath)tools" />
    <NuspecProperty Include="MicrosoftAspNetCoreComponentsWebAssemblyRuntimePackageVersion=$(MicrosoftAspNetCoreComponentsWebAssemblyRuntimePackageVersion)" />
    <NuspecProperty Include="PackageThirdPartyNoticesFile=$(PackageThirdPartyNoticesFile)" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.AspNetCore.Components.WebAssembly.Build.Tests" />
  </ItemGroup>

  <ItemGroup>
    <!-- Add a project dependency without reference output assemblies to enforce build order -->
    <!-- Applying workaround for https://github.com/microsoft/msbuild/issues/2661 and https://github.com/dotnet/sdk/issues/952 -->
    <ProjectReference
      Include="$(RepoRoot)src\Components\Web.JS\Microsoft.AspNetCore.Components.Web.JS.npmproj"
      ReferenceOutputAssemblies="false"
      SkipGetTargetFrameworkProperties="true"
      UndefineProperties="TargetFramework"
      Private="false"
      Condition="'$(BuildNodeJS)' != 'false' and '$(BuildingInsideVisualStudio)' != 'true'" />

    <ProjectReference
      Include="..\..\Compression\src\Microsoft.AspNetCore.Components.WebAssembly.Build.BrotliCompression.csproj"
      ReferenceOutputAssemblies="false"
      Condition="'$(TargetFramework)' == '$(DefaultNetCoreTargetFramework)'" />

    <Reference Include="Microsoft.Build.Framework" ExcludeAssets="Runtime" />
    <Reference Include="Microsoft.Build.Utilities.Core"  ExcludeAssets="Runtime" />
    <Reference Include="System.Reflection.Metadata" Condition="'$(TargetFramework)' == 'net46'" />
  </ItemGroup>

  <Target Name="CopyBuildTask" BeforeTargets="Build" Condition="'$(DotNetBuildFromSource)' != 'true' AND '$(IsInnerBuild)' != 'true'">
      <!--
      The task produced by this project is referenced within this solution. When building, Visual Studio will lock up the assembly.
      Any attempts to overwrite the binary with a newer version will fail. This is particularly grating if a developer "Rebuilds" the project
      after an initial build since that would always attempt to overwrite the tasks dll

      This target attempts to make this solution more usable at the cost of a more onerous inner-loop build of the Blazor.Build tasks.
      We'll copy the tasks to a location other that than the build output and use that in the Blazor.Build.targets. In the most common
      case where these tasks aren't being worked on, everything should work great. However, if you're attemping to modify these tasks,
      you will need to manaully stop MSBuild.exe processes
      -->

    <ItemGroup>
      <_NetCoreFilesToCopy Include="$(OutputPath)$(DefaultNetCoreTargetFramework)\*" TargetPath="netcoreapp\" />
      <_DesktopFilesToCopy Include="$(OutputPath)net46\*" TargetPath="netfx\" />
      <_AllFilesToCopy Include="@(_NetCoreFilesToCopy);@(_DesktopFilesToCopy)" />
    </ItemGroup>

    <Error Text="No files found in $(OutputPath)$(DefaultNetCoreTargetFramework)" Condition="@(_NetCoreFilesToCopy->Count()) == 0" />
    <Error Text="No files found in $(OutputPath)net46" Condition="@(_DesktopFilesToCopy->Count()) == 0" />

    <Copy SourceFiles="@(_AllFilesToCopy)" DestinationFiles="@(_AllFilesToCopy->'$(OutputPath)tools\%(TargetPath)%(FileName)%(Extension)')" SkipUnchangedFiles="true" Retries="1" ContinueOnError="true">
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>
  </Target>

  <ItemGroup>
    <_BrotliToolPathInput Include="..\..\Compression\src\Microsoft.AspNetCore.Components.WebAssembly.Build.BrotliCompression.csproj" />
    <_BrotliToolPathInput Include="..\..\Compression\src\*.cs" />
    <_BrotliToolPathInput Include="..\..\Compression\src\*.runtimeconfig.json" />
    <_BrotliToolPathOutput Include="$(MSBuildThisFileDirectory)bin\$(Configuration)\tools\compression\blazor-brotli.dll" />
  </ItemGroup>

  <Target
    Name="GetBrotliTools"
    BeforeTargets="Build;GenerateNuspec"
    Inputs="@(_BrotliToolPathInput)"
    Outputs="@(_BrotliToolPathOutput)"
    Condition="'$(DotNetBuildFromSource)' != 'true'">
    <ItemGroup>
      <_BrotliToolsPath Include="$(MSBuildThisFileDirectory)bin\$(Configuration)\tools\compression\" />
    </ItemGroup>

    <PropertyGroup>
      <_BrotliToolsOutputPath>@(_BrotliToolsPath->'%(FullPath)')</_BrotliToolsOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <NuspecProperty Include="brotliDir=$(_BrotliToolsOutputPath)" />
    </ItemGroup>

    <MSBuild
      Projects="..\..\Compression\src\Microsoft.AspNetCore.Components.WebAssembly.Build.BrotliCompression.csproj"
      Targets="Publish"
      Properties="Configuration=$(Configuration);TargetFramework=netcoreapp3.1;PublishDir=$(_BrotliToolsOutputPath)">
    </MSBuild>

  </Target>

</Project>
